報告投影片解說 - Class Diagrams

第一張Class圖 (對應投影片第二頁):
- 這一頁要說明圖形生成、管理、事件觸發與資料結構的設計，對應 GameUI、MazeGame、Cell、Player、LoginPanel 等類別。可以強調這些類別如何分工合作，讓遊戲流程順暢，玩家操作直覺。
    - GameUI: 負責整體遊戲畫面的使用者介面元件，例如按鈕、計分板、迷宮顯示區域。它協調各個視覺元素的呈現與互動。
    - LoginPanel: 這是遊戲的初始登入或模式選擇畫面。它處理玩家選擇單人或多人模式的邏輯，並觸發相應的遊戲流程。
    - MazeGame: 核心的遊戲邏輯類別之一，管理單人遊戲的進行，包括玩家移動、碰撞檢測、勝利條件判斷等。
    - Cell: 代表迷宮中的一個單元格。它儲存了關於牆壁的資訊 (是否有牆) 以及它在迷宮中的位置。
    - Player: 代表遊戲中的玩家角色。它儲存了玩家的目前位置 (x, y 座標) 以及可能的其他狀態，如得分。

第二張Class圖 (對應投影片第三頁):
- 這一頁介紹迷宮生成、狀態控制、資料儲存與遊戲啟動的流程，對應 GameState、MazePanel、Continue、App、MazeGenerator 等類別。補充每個類別的主要職責，以及它們在遊戲流程中的角色，讓聽眾了解整個專案的設計邏輯。
    - GameState: 管理遊戲的整體狀態，例如目前關卡、玩家分數、剩餘時間、玩家列表 (多人模式下) 等。它是一個資料中心，供其他類別讀取和更新遊戲進程。
    - MazePanel: 專門負責繪製迷宮的面板。它會根據 MazeGenerator 產生的 Cell 陣列以及玩家的位置，將迷宮視覺化地呈現在螢幕上。
    - Continue: 負責遊戲的存檔與讀檔功能。它會將 GameState 中的重要資訊 (如關卡、玩家位置、迷宮種子) 序列化並儲存到檔案 (例如 save.txt)，或從檔案中讀取以恢復遊戲。
    - App: 應用程式的進入點 (main 方法所在之處)。它負責初始化整個遊戲，載入必要的設定，並啟動第一個畫面 (通常是 LoginPanel)。
    - MazeGenerator: 負責隨機生成迷宮的演算法。它會產生一個二維的 Cell 陣列，定義迷宮的結構和路徑。
