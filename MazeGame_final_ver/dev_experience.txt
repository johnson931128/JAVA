# 開發心得

這次開發多人連線迷宮遊戲的過程，真的是一場身心靈的洗禮。從一開始的專案規劃、模組拆分，到每個功能的實作與除錯，過程中遇到無數挑戰。網路連線的同步問題、GUI 介面的細節調整、音效與多媒體的整合，每一項都讓我焦頭爛額。
最讓我印象深刻的是，為了讓每位玩家都能即時看到彼此的動作，我反覆調整資料結構與通訊協定，光是 debug 就熬了好幾個夜晚。每當看到畫面終於順利同步、音樂響起時，真的忍不住熱淚盈眶。
過程中也深刻體會到團隊合作的重要，大家互相討論、彼此打氣，才讓專案能順利完成。雖然一路跌跌撞撞，但看到最終成品，所有辛苦都值得了。
這次專案不僅讓我技術大幅成長，也讓我學會堅持與面對困難的勇氣。未來遇到挑戰，我會記得這段聲淚俱下的開發旅程，繼續勇敢前行！

# 第一頁 class 圖講稿

這一頁主要展示了遊戲核心的幾個重要類別：GameUI、MazeGame、Player、Cell、LoginPanel。

GameUI 是整個遊戲的主視窗與介面管理者，負責初始化所有畫面元件，包括分數、計時、音效、迷宮面板等，並處理玩家的互動、按鈕事件與畫面切換。它同時負責根據遊戲狀態即時更新畫面，讓玩家有流暢的遊戲體驗。
MazeGame 則是遊戲主邏輯的核心，負責遊戲初始化、玩家移動、勝負判斷、鍵盤與計時器事件等，確保遊戲流程順暢。它會根據玩家的操作來判斷移動是否合法，並在遊戲結束時顯示結果。
Player 代表每個玩家的狀態，包含座標、移動設定，並提供設定與取得位置的方法，讓遊戲能追蹤每位玩家的動作。
Cell 是迷宮格子的資料結構，記錄每個格子的狀態（如是否為牆），並提供相關操作，讓迷宮的生成與判斷更為方便。
LoginPanel 則是登入與模式選擇的介面，負責顯示登入選項、多玩家模式與相關按鈕，讓玩家能順利進入遊戲。

這些類別彼此協作，構成遊戲的主畫面、玩家互動與迷宮邏輯的基礎，讓整個遊戲流程順暢且易於擴充。

# 第二頁 class 圖講稿

第二頁則聚焦在遊戲狀態、迷宮生成、資料儲存與主程式等模組：GameState、MazePanel、Continue、App、MazeGenerator。

GameState 負責記錄與管理遊戲的整體狀態，包括迷宮資料、分數、時間、關卡、玩家資訊等，是遊戲進度的核心。它能夠追蹤每一局的詳細資訊，並支援分數與時間的更新。
MazePanel 則專注於迷宮的繪製與顯示，負責將迷宮資料渲染到畫面上，並根據玩家狀態即時更新，讓玩家能清楚看到自己的位置與迷宮結構。
Continue 提供遊戲進度的儲存與載入功能，讓玩家可以隨時存檔與續玩，提升遊戲的便利性與耐玩度。
App 是主程式進入點，負責載入設定、切換畫面、啟動遊戲主流程，串聯各個模組，確保遊戲能順利啟動與運作。
MazeGenerator 則負責隨機產生迷宮地圖，確保每次遊戲都有不同挑戰，並提供迷宮驗證與生成演算法。

這些類別讓遊戲具備狀態管理、畫面更新、資料儲存與隨機地圖等完整功能，支撐遊戲的多樣玩法與體驗，讓玩家每次遊玩都能有新鮮感與成就感。

# Single 模式流程圖步驟

1. 啟動遊戲程式（App.main）
2. 顯示主選單（LoginPanel）：玩家選擇 SINGLE 模式
3. 進入遊戲主畫面（GameUI），初始化介面元件
4. 產生新迷宮（MazeGenerator.generate），建立迷宮資料（Cell[][]）
5. 初始化遊戲狀態（GameState）：設定玩家初始位置、分數、時間等
6. 顯示迷宮畫面（MazePanel），渲染迷宮與玩家
7. 玩家透過鍵盤操作移動（MazeGame.movePlayer），每次移動檢查是否合法（isValidMove）
8. 遊戲計時器啟動（MazeGame.setupTimer），同步更新時間與分數
9. 玩家抵達終點，觸發過關判斷（MazeGame.checkWin）
10. 顯示過關對話框（GameUI.showLevelCompleteDialog），紀錄成績
11. 玩家可選擇繼續下一關或返回主選單
12. 若選擇繼續，重複步驟4~11，否則結束遊戲
